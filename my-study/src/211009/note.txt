
### useEffect
- 함수형 클래스에서 다양한 side effect를 가능하게 한다.
- 클래스형 컴포너트에서 ComponentDidMount, ComponentWillUnMount, ComponentDidUpdate의 역할을 한다.
- useEffect는 function과 dependency 두가지 인자를 받는다.
- dependency(deps)가 값이 비었을 경우, 컴포넌트가 mount될 때 반응한다.
- dependency(deps)에 값이 존재할 경우, 값이 변화할 때 반응한다.

### useTitle
- doc의 title을 업데이트하여 준다. (react-helmet을 사용하여 할 수 있지만, Hooks를 사용해서도 할 수 있다.)

### useClick
- reference 개념을 이용한다. (reference는 react에 컴포넌트들의 특정부분을 선택할 수 있는 방법 == document.getElementById())

### useConfirm
- 사용자가 어떤 액션을 하기 전에 확인할 때 사용한다. (ex. 정말 삭제할 것인지?)
- 확인하면 function을 진행할 수 있도록 한다.

### usePreventLeave
- 사용자가 데이터를 저장하지 않은 상태에서 페이지를 벗어날 때 사용할 수 있다.(ex. 아직 저장되지 않았다.)
- 'beforeunload'를 사용하여 구현한다.(beforeunload는 위와 같은 상황에서 페이지를 닫을 것인지에 대한 안내창을 제공해준다.)
- 'beforeunload'는 함수가 닫히기 전에 function을 실행할 수 있게 한다.

### usePageLeave
- 탭을 닫을 때 실행된다.
- 마우스가 팝업을 벗어날 때 실행된다.
- 팝업처리시 사용 시 유연하다.

### useFadeIn
- 자동으로 서서히 나타나게 하는 효과를 의미한다.
- css를 사용해서 만들 수 있지만, animation과 hooks를 사용하여 만들 수 있다.


### useScroll
- 스크롤 이벤트 작동시, 스크롤 위치에 따른 효과 처리를 할 수 있다.

### useFullScreen
- 특정 element를 fullScreen 해줄 수 있다.

### useNotification
- 웹 서비스 내에 알림을 설정할 수 있다.
- 다양한 options을 전달할 수 있다.

### react Hooks
- hooks는 문서의 최상단에 어떤 값이 return되기 전에 정의되어야 한다.
